global
    log stdout format raw local0

defaults
    mode http
    log global
    timeout client 5s
    timeout server 5s
    timeout connect 5s
    option httplog

listen stats
    bind 127.0.0.1:8000
    stats enable
    stats uri /
    stats refresh 15s

frontend test
    bind *:8080
    log-format "%ci:%cp\ [%t]\ %ft\ %b/%s\ %Th/%Ti/%TR/%Tq/%Tw/%Tc/%Tr/%Tt\ %ST\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+Q}r\ %ID spoa-error:\ %[var(txn.berghain.error)]"

    http-request track-sc1 src table st_src

    filter spoe engine berghain config examples/haproxy/berghain.cfg

    http-request set-var(req.berghain.level) int(1) if { sc1_http_req_rate gt 5 }
    http-request set-var(req.berghain.level) int(2) if { sc1_http_req_rate gt 10 }
    http-request set-var(req.berghain.level) int(3) if { sc1_http_req_rate gt 15 }

    acl berghain_active var(req.berghain.level) -m found

    acl berghain_path capture.req.uri,url_dec -i -m reg "^/+cdn-cgi/challenge-platform/+"
    http-request send-spoe-group berghain validate if !berghain_path berghain_active
    http-request return status 501 if { var(txn.berghain.error) -m found }

    acl berghain_valid var(txn.berghain.valid) -m bool

    http-request return status 403 content-type "text/html" file "web/dist/index.html" if !berghain_valid !berghain_path berghain_active
    use_backend berghain_http if berghain_path

    default_backend app_backend

backend st_src
    stick-table type ipv6 size 1m expire 15m store http_req_rate(10s)

backend app_backend
    mode http
    http-request return status 200 content-type "text/plain" string "Hello World!"

backend berghain_http
    mode http
    filter spoe engine berghain config examples/haproxy/berghain.cfg

    acl is_challenge_path path,url_dec -i -m reg "^/+cdn-cgi/challenge-platform/challenge\$"

    http-request send-spoe-group berghain challenge if is_challenge_path
    http-request return status 501 if { var(txn.berghain.error) -m found }

    acl has_token var(txn.berghain.token) -m found

    http-after-response add-header set-cookie "berghain=%[var(txn.berghain.token)]; domain=%[var(txn.berghain.domain)]; path=/;" if has_token
    http-request return status 200 content-type "application/json" lf-string "%[var(txn.berghain.response)]" if is_challenge_path

    http-request return status 404

backend berghain_spop
    mode tcp
    option spop-check
    server localhost unix@./spop.sock check
